input {
    redis { 
        host => "127.0.0.1"
        password => "<%= @redis_password %>"
        data_type => "list"
        key => "wms"
        add_field => [ "hardis_key", "reflex"]
    } 
}




filter {
    if [hardis_key] == "reflex" {

        if [application] == "wms" {
            			
			# Create an error message field
			if [level] == "ERROR" {
				mutate {
					add_field => { "error_msg" => "%{message}" }
				}
			}
						
			# Manage SQL dump message
			grok {
			  match=> { "message" => "cursor\:\s%{DATA:sql_cursor};" }
			}
			grok {
			  match=> { "message" => "request\:\s%{DATA:sql_request};" }
			}
			grok {
			  match=> { "message" => "parameters\:\s%{DATA:sql_param};" }
			}
			grok {
			  match=> { "message" => "code\:\s%{DATA:sql_code};" }
			}
			grok {
			  match=> { "message" => "nanoTime\:\s%{NUMBER:sql_nanoTime}" }
			}
			grok {
			  match=> { "message" => "fetch\:\s%{DATA:sql_fetch};" }
			}
			grok {
			  match=> { "message" => "command\:\s%{DATA:sql_command};" }
			}
			
			# Save fetch into field sql_request
			if [sql_fetch] {
				mutate {
					add_field => { "sql_request" => "fetch : %{sql_fetch}" }
					remove_field => [ "sql_fetch" ]
				}
			}
			# Save command into field sql_request
			if [sql_command] {
				mutate {
					add_field => { "sql_request" => "command : %{sql_command}" }
					remove_field => [ "sql_command" ]
				}
			}
			
			# Detect SQL table
			grok {
			  match=> { "sql_request" => "(select|delete|SELECT|DELETE)\s+.*from\s+%{DATA:sql_table}\s+" }
			}
			grok {
			  match=> { "sql_request" => "(update|UPDATE)\s+%{DATA:sql_table}\s+" }
			}
			grok {
			  match=> { "sql_request" => "(insert\s+into|INSERT\s+INTO)\s+%{DATA:sql_table}\s+" }
			}
			
			# Detect SQL error message
			if [error_msg] {
				if [class] =~ /com\.hardis\.adelia\.jdbc\./ {
					grok {
					  match=> { "error_msg" => "sqlcode\s%{DATA:sql_code}," }
					}
					grok {
					  match=> { "error_msg" => "sqlstate\s'%{DATA:sql_state}'," }
					}
				}
				else {
					mutate {
						add_field => { "sql_code" => "NA" }
						add_field => { "sql_state" => "NA" }
					}
				}
			}
			
			# Set unknown program
			if ! [mdc][program] {
				mutate {	
					add_field => { "[mdc][program]" => "NA" }
				}
			}
			
			# Detect the origin of the program
			if [mdc][program] =~ /(^H|^RFX|SESMAN|^TU|^CONSOL|^AWSGTS|^PROCMN|CONGUI|MDWERW|SVCERW)/ {
                mutate {
                    add_field => { "origin" => "standard" }
                }
			} else if [mdc][program] =~ /(^Wagon|^Adelia|GarbageSession|^Mw)/ {
                mutate {
                    add_field => { "origin" => "adelia" }
                }
			} else if [mdc][program] == "NA" {
                mutate {
                    add_field => { "origin" => "undefined" }
                }
			} else {
                mutate {
                    add_field => { "origin" => "custom" }
                }
			}

			
        }
    }
}